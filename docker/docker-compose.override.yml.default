version: "2.4"

x-service-defaults:
  &service-defaults
  restart: always
  networks:
    - front

x-service-rewrelic:
  &service-newrelic
  newrelic:
    <<: *service-defaults
    image: newrelic/php-daemon
    container_name: "${COMPOSE_PROJECT_NAME}_newrelic"

services:
#  <<: *service-newrelic

# Override base service.
  php:
    environment:
      COMPOSER_MEMORY_LIMIT: "-1"
#      BLACKFIRE_CLIENT_ID: x
#      BLACKFIRE_CLIENT_TOKEN: x
#      NEW_RELIC_APPNAME: "${COMPOSE_PROJECT_NAME}"
    volumes:
# Uncomment for MacOS.
#     - 'nfsmount:/var/www/html'
      - "./90-mail.ini:/etc/php81/conf.d/90-mail.ini:z"
#    depends_on:
#      - mysql
#      - postgresql
# Uncomment next line if you need PHP XDebug.
#    command: php-fpm81 -F -dzend.assertions=1 -dzend_extension=xdebug.so
#    command: php-fpm81 -F -dzend.assertions=1 -dopcache.jit_buffer_size=20M

# Get access keys from https://blackfire.io/my/profiles
# Then download extension using "make blackfire"

#  blackfire:
#    <<: *service-defaults
#    image: blackfire/blackfire
#    container_name: "${COMPOSE_PROJECT_NAME}_blackfire"
#    environment:
#      BLACKFIRE_SERVER_ID: x
#      BLACKFIRE_SERVER_TOKEN: x
#      BLACKFIRE_LOG_LEVEL: 1

#  adminer:
#    <<: *service-defaults
#    image: adminer:standalone
#    container_name: "${COMPOSE_PROJECT_NAME}_adminer"
#    links:
#      - mysql:mysql
#    depends_on:
#      - mysql

#  mysql:
#    <<: *service-defaults
#    image: percona:5.7
#    container_name: "${COMPOSE_PROJECT_NAME}_mysql"
#    volumes:
#      - ${DB_DATA_DIR}/${COMPOSE_PROJECT_NAME}_mysql:/var/lib/mysql:Z
#    environment:
#      MYSQL_DATABASE: db
#      MYSQL_USER: db
#      MYSQL_PASSWORD: db
#      MYSQL_ROOT_PASSWORD: dbroot

#  postgresql:
#    <<: *service-defaults
#    image: postgres:12.2-alpine
#    container_name: "${COMPOSE_PROJECT_NAME}_pgsql"
#    volumes:
#      - ${DB_DATA_DIR}/${COMPOSE_PROJECT_NAME}_pgsql:/var/lib/postgresql/data:Z
#    environment:
#      POSTGRES_DB: db
#      POSTGRES_USER: db
#      POSTGRES_PASSWORD: dbroot
#      PGDATA: /var/lib/postgresql/data

  mailhog:
    <<: *service-defaults
    image: skilldlabs/mailhog
    container_name: "${COMPOSE_PROJECT_NAME}_mail"
    labels:
      - 'traefik.enable=true'
      # Treafik 1.x
      - 'traefik.backend=${MAIN_DOMAIN_NAME}_mail'
      - 'traefik.frontend.rule=Host:mail-${MAIN_DOMAIN_NAME}'
      - 'traefik.frontend.redirect.entryPoint=https'
      - 'traefik.port=8025'
      # Treafik 2.x
      - 'traefik.http.routers.mailhog-${COMPOSE_PROJECT_NAME}.rule=Host(`mail-${MAIN_DOMAIN_NAME}`)'
      - 'traefik.http.routers.mailhog-${COMPOSE_PROJECT_NAME}.tls.certresolver=dns'
      - 'traefik.http.routers.mailhog-${COMPOSE_PROJECT_NAME}.tls=true'
      - 'traefik.http.routers.mailhog-${COMPOSE_PROJECT_NAME}.middlewares=mailhog-${COMPOSE_PROJECT_NAME}@docker'
      - 'traefik.http.services.mailhog-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=8025'
      - 'traefik.http.middlewares.mailhog-${COMPOSE_PROJECT_NAME}.basicauth.users=${RA_BASIC_AUTH}'
      - 'traefik.http.middlewares.mailhog-${COMPOSE_PROJECT_NAME}.basicauth.removeheader=true'

  nginx:
# Uncomment for MacOS.
#    ports:
#    - "8088:80"
# Mount local folder with ssl keys.
#    volumes:
#     - ./nginx/ssl:/etc/nginx/ssl:Z
    labels:
      - 'traefik.enable=true'
      # Treafik 1.x
      - 'traefik.backend=${MAIN_DOMAIN_NAME}_web'
      - 'traefik.frontend.rule=Host:${MAIN_DOMAIN_NAME}'
      - 'traefik.frontend.redirect.entryPoint=https'
      - 'traefik.port=80'
      # Treafik 2.x
      - 'traefik.http.routers.nginx-${COMPOSE_PROJECT_NAME}.rule=Host(`${MAIN_DOMAIN_NAME}`)'
      - 'traefik.http.routers.nginx-${COMPOSE_PROJECT_NAME}.tls.certresolver=dns'
      - 'traefik.http.routers.nginx-${COMPOSE_PROJECT_NAME}.tls=true'
      - 'traefik.http.routers.nginx-${COMPOSE_PROJECT_NAME}.middlewares=nginx-${COMPOSE_PROJECT_NAME}@docker'
      - 'traefik.http.middlewares.nginx-${COMPOSE_PROJECT_NAME}.basicauth.users=${RA_BASIC_AUTH}'
      - 'traefik.http.middlewares.nginx-${COMPOSE_PROJECT_NAME}.basicauth.removeheader=true'


#  apache:
#  Uncomment for MacOS.
#     ports:
#     - "8088:80"
#  Mount local folder with ssl keys.
#     volumes:
#      - ./apache/ssl:/etc/apache2/ssl:Z
#    labels:
#      - 'traefik.enable=true'
#      # Treafik 1.x
#      - 'traefik.backend=${MAIN_DOMAIN_NAME}_web'
#      - 'traefik.frontend.rule=Host:${MAIN_DOMAIN_NAME}'
#      - 'traefik.frontend.redirect.entryPoint=https'
#      - 'traefik.port=80'
#      # Treafik 2.x
#      - 'traefik.http.routers.apache-${COMPOSE_PROJECT_NAME}.rule=Host(`${MAIN_DOMAIN_NAME}`)'
#      - 'traefik.http.routers.apache-${COMPOSE_PROJECT_NAME}.tls.certresolver=dns'
#      - 'traefik.http.routers.apache-${COMPOSE_PROJECT_NAME}.tls=true'
#      - 'traefik.http.routers.apache-${COMPOSE_PROJECT_NAME}.middlewares=apache-${COMPOSE_PROJECT_NAME}@docker'
#      - 'traefik.http.middlewares.apache-${COMPOSE_PROJECT_NAME}.basicauth.users=${RA_BASIC_AUTH}'
#      - 'traefik.http.middlewares.apache-${COMPOSE_PROJECT_NAME}.basicauth.removeheader=true'

#  solr:
#    labels:
#      - 'traefik.enable=true'
#      # Treafik 1.x
#      - 'traefik.backend=${MAIN_DOMAIN_NAME}_solr'
#      - 'traefik.frontend.rule=Host:solr-${MAIN_DOMAIN_NAME}'
#      - 'traefik.frontend.redirect.entryPoint=https'
#      - 'traefik.port=8983'
#      # Treafik 2.x
#      - 'traefik.http.routers.solr-${COMPOSE_PROJECT_NAME}.rule=Host(`solr-${MAIN_DOMAIN_NAME}`)'
#      - 'traefik.http.routers.solr-${COMPOSE_PROJECT_NAME}.tls.certresolver=dns'
#      - 'traefik.http.routers.solr-${COMPOSE_PROJECT_NAME}.tls=true'
#      - 'traefik.http.routers.solr-${COMPOSE_PROJECT_NAME}.middlewares=solr-${COMPOSE_PROJECT_NAME}@docker'
#      - 'traefik.http.services.solr-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=8983'
#      - 'traefik.http.middlewares.solr-${COMPOSE_PROJECT_NAME}.basicauth.users=${RA_BASIC_AUTH}'
#      - 'traefik.http.middlewares.solr-${COMPOSE_PROJECT_NAME}.basicauth.removeheader=true'

# Uncomment for MacOS.
#volumes:
#  nfsmount:
#    driver: local
#    driver_opts:
#      type: nfs
#      o: addr=host.docker.internal,rw,nolock,hard,nointr,nfsvers=3
#      device: ":${PWD}"
