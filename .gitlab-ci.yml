# Variables to add in Gitalb UI : Settings > CI/CD
# - NEW_RELIC_LICENSE_KEY // Optional
# - TEST_UPDATE_DEPLOYMENTS // Optional, enables test:deploy job
# - GITLAB_PROJECT_ACCESS_TOKEN // Required by test:deploy job. To be created in Gitlab project UI with read_api and read_repository permissions
# - GITLAB_PROJECT_BASIC_AUTH // Required by test:deploy job. Encoded credentials to pass Gitlab basic auth, if any

variables:
  GIT_DEPTH: "10"
  THEME_PATH: "" # Update to enable front jobs (web/themes/custom/XXX)
  STORYBOOK_PATH: "" # Update to enable storybook job (themes/custom/XXX/dist/storybook/index.html)
  GIT_STRATEGY: fetch
  REVIEW_DOMAIN: "XXX.XXX.com" # Mandatory, should equal to DNS of available runner server with docker + docker-compose + traefik
  IMAGE_PHP: skilldlabs/php:81

image: $IMAGE_PHP

# Tags defines which runner to use (expected shell runner)
.runner_tag_selection:
  tags:
    - XXX # Mandatory, should equal to tag of available runner server with docker + docker-compose + traefik

before_script:
  - date
  - pwd

stages:
  - sniffers
  - prepare
  - build
  - update
  - tests
  - more tests

sniffers:clang:
  stage: sniffers
  script:
    - make clang
  only:
    - branches
    - merge_requests

sniffers:compose:
  stage: sniffers
  script:
    - composer -vvv -V
    - time composer validate --profile
  only:
    - branches
    - merge_requests

sniffers:front:
  stage: sniffers
  before_script:
    - date
    - pwd
  script:
    - make front-install # Dependencies are required for js imports to pass linters
    - make lintval
  cache:
    key:
      files:
      # Until https://gitlab.com/gitlab-org/gitlab/issues/118466 lands ...
        - web/themes/custom/XXX/package.json # ... this path has to be hardcoded
        - web/themes/custom/XXX/yarn.lock # ... this path has to be hardcoded
    paths:
      - ${THEME_PATH}/node_modules/ # Populated during yarn install
  artifacts:
    name: "${CI_COMMIT_REF_NAME}:${CI_COMMIT_SHA}:front"
    expire_in: 1d
    paths:
      - ${THEME_PATH}/node_modules/ # Populated during yarn install
  extends: .runner_tag_selection
  only:
    refs:
      - branches
      - merge_requests
      - tags
    variables:
      - $THEME_PATH


sniffers:phpcs:
  stage: sniffers
  image: skilldlabs/docker-phpcs-drupal
  script:
    - docker -v
    - make phpcs
  extends: .runner_tag_selection
  only:
    - branches
    - merge_requests

sniffers:newlineeof:
  stage: sniffers
  script:
    - make newlineeof
  only:
    - branches
    - merge_requests


prepare:back:
  stage: prepare
  script:
    - docker --version
    - pwd
    - ls -la
# Make back on the fly, using --ignore-platform-reqs as additional PHP-extensions could be missing
    - docker run -e "COMPOSER_MEMORY_LIMIT=-1" --user 1000:1000 --rm --init -v `pwd`:`pwd` -w `pwd` "$IMAGE_PHP" /bin/ash -c "composer --version && composer install --no-interaction --prefer-dist -o -v && composer create-required-files"
  cache:
    key:
      files:
        - composer.json
        - composer.lock
    paths:
      - vendor/
      - web/core/
      - web/libraries/
      - web/modules/contrib/
      - web/profiles/contrib/
      - web/themes/contrib/
      - drush/contrib/
  dependencies: []
  artifacts:
    name: "${CI_COMMIT_REF_NAME}:${CI_COMMIT_SHA}:back"
    expire_in: 12 hrs
    paths:
      - vendor/
      - web/
      - drush/
    exclude:
      - web/modules/custom/
      - web/themes/custom/
      - web/profiles/contrib/
  extends: .runner_tag_selection
  only:
    - branches
    - merge_requests
    - tags
  retry: 2

prepare:front:
  stage: prepare
  script:
    - make front-install
    - make front-build
  dependencies:
    - sniffers:front
  artifacts:
    name: "${CI_COMMIT_REF_NAME}:${CI_COMMIT_SHA}:front"
    expire_in: 12 hrs
    paths:
      - ${THEME_PATH}/dist/ # Populated during yarn build
  extends: .runner_tag_selection
  only:
    refs:
      - branches
      - merge_requests
      - tags
    variables:
      - $THEME_PATH


.deploy_template: &deploy_template
  stage: build
  script:
    - echo "Deploy ${CI_ENVIRONMENT_URL} review app to ${BUILD_DIR}."
    - echo "CI_ENVIRONMENT_NAME=${CI_ENVIRONMENT_NAME}"
    - echo "CI_ENVIRONMENT_SLUG=${CI_ENVIRONMENT_SLUG}"
    - echo "CI_COMMIT_REF_SLUG=${CI_COMMIT_REF_SLUG}"
    - echo "CI_ENVIRONMENT_URL=${CI_ENVIRONMENT_URL}"
    - echo "CI_PROJECT_PATH_SLUG=${CI_PROJECT_PATH_SLUG}"
    - echo "CI_PROJECT_NAME=${CI_PROJECT_NAME}"
    - echo "REVIEW_DOMAIN=${REVIEW_DOMAIN}"
    - mkdir -p ${BUILD_DIR}
    - rsync -ah --exclude=.git --exclude=.cache --delete ./ ${BUILD_DIR}
    - cd ${BUILD_DIR}
    - echo "COMPOSE_PROJECT_NAME=${CI_PROJECT_NAME}-review-${CI_COMMIT_REF_SLUG}" >> .env.default
    - echo "MAIN_DOMAIN_NAME=${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_PATH_SLUG}.${REVIEW_DOMAIN}" >> .env.default
    - docker --version
    - docker-compose --version
    - make all_ci
    - make drush config-set system.site name '${CI_COMMIT_REF_SLUG}' -- -y
    - echo "Copying DB and files to make them accessible to artifact creator"
    - docker-compose exec -T --user root php ash -c "chmod -R 775 .cache/" && cp -r .cache/ ${CI_PROJECT_DIR} && cp -r web/sites/ ${CI_PROJECT_DIR}/web/ # https://gitlab.com/gitlab-org/gitlab-foss/-/issues/15530#note_533732001
  after_script:
    - docker network prune -f
    - docker container prune -f
    - echo "Started ${CI_ENVIRONMENT_URL} composition in ${BUILD_DIR} from Makefile."
  dependencies:
    - prepare:back
    - prepare:front
  allow_failure: false # https://gitlab.com/gitlab-org/gitlab-foss/-/issues/25892#note_26909808
  extends: .runner_tag_selection
  only:
    - branches
    - merge_requests
  retry: 2

.deploy_template_environment_ttl_long: &deploy_template_environment_ttl_long
  environment:
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_PATH_SLUG}.${REVIEW_DOMAIN}
    name: review/${CI_COMMIT_REF_NAME}
    on_stop: stop_review
    auto_stop_in: 4 weeks

.deploy_template_environment_ttl_mid: &deploy_template_environment_ttl_mid
  environment:
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_PATH_SLUG}.${REVIEW_DOMAIN}
    name: review/${CI_COMMIT_REF_NAME}
    on_stop: stop_review
    auto_stop_in: one week

.deploy_template_environment_ttl_short: &deploy_template_environment_ttl_short
  environment:
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_PATH_SLUG}.${REVIEW_DOMAIN}
    name: review/${CI_COMMIT_REF_NAME}
    on_stop: stop_review
    auto_stop_in: 12 hours

build:review:
  <<: *deploy_template
  <<: *deploy_template_environment_ttl_mid
  when: manual
  except:
    - master
    - main

build:master:
  <<: *deploy_template
  <<: *deploy_template_environment_ttl_long
  when: always
  only:
    - master
    - main

build:tag:
  <<: *deploy_template
  <<: *deploy_template_environment_ttl_short
  when: always
  only:
    - tags
  artifacts:
    name: "${CI_PROJECT_NAME}-raw_build_db_and_files-tag-artifact"
    expire_in: 6 mos
    paths:
      - web/sites/*/files/
      - .cache

stop_review:
  stage: build
  dependencies: []
  script:
    - date; pwd; ls -lahq;
    - echo "Clean-up build dir ${BUILD_DIR}"
    - (if [ -d ${BUILD_DIR} ]; then date; cd ${BUILD_DIR}; pwd; make clean; cd -; rm -rf ${BUILD_DIR}; fi)
    - echo "Removed previous review app ${CI_ENVIRONMENT_URL} from ${BUILD_DIR}."
  variables:
    GIT_STRATEGY: none
  when: manual
  environment:
    name: review/${CI_COMMIT_REF_NAME}
    action: stop
  extends: .runner_tag_selection
  only:
    - branches
    - merge_requests
    - tags

generate:logins:
  stage: build
  dependencies: []
  script:
    - cd ${BUILD_DIR}
    - make info
  when: manual
  environment:
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_PATH_SLUG}.${REVIEW_DOMAIN}
    name: review/${CI_COMMIT_REF_NAME}
    on_stop: stop_review
  extends: .runner_tag_selection
  only:
    - branches
    - merge_requests

test:deploy:
  stage: update
  extends: .runner_tag_selection
  environment:
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_PATH_SLUG}.${REVIEW_DOMAIN}
    name: review/${CI_COMMIT_REF_NAME}
    on_stop: stop_review
  script:
    - cd ${BUILD_DIR}
    - ls -lah
    - ls -lah .cache/
    - ls -lah web/sites/*/files/
    - printf "\033[1m- Getting name of last tag created...\n\033[0m"
    - export LAST_TAG=$(curl --header "Authorization:${GITLAB_PROJECT_BASIC_AUTH}" --header "PRIVATE-TOKEN:${GITLAB_PROJECT_ACCESS_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/repository/tags" | jq -r '.[0] | .name')
    - |
      if [ "${LAST_TAG}" = "null" ]; then printf "\033[1m- No tag was found. Nothing to do here.\n\033[0m"; else \
      printf "\033[1m- Tag found! (${LAST_TAG}) Downloading it's artifacts...\n\033[0m" && \
      curl --location --output artifacts.zip --header "Authorization:${GITLAB_PROJECT_BASIC_AUTH}" --header "PRIVATE-TOKEN:${GITLAB_PROJECT_ACCESS_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/jobs/artifacts/${LAST_TAG}/download?job=build:tag" && \
      printf "\033[1m- Artifacts were successfully downloaded from tag ${LAST_TAG}\n\033[0m" && \
      printf "\033[1m- Replacing DB and files of ${CI_ENVIRONMENT_URL} from those of ${LAST_TAG} tag artifacts\n\033[0m" && \
      docker-compose exec -T --user root php ash -c "chmod -R 775 .cache/ web/sites/*/files/" && \
      rm -rf .cache/* web/sites/*/files/* && \
      unzip -o artifacts.zip && \
      printf "\033[1m- DB and files from ${CI_ENVIRONMENT_URL} were successfully replaced from those of the artifacts\n\033[0m" && \
      make drush cr && \
      # Disabling config_ignore so that all configs will be imported bellow
      if [ $(docker-compose exec -T php sh -c "drush config:status --state=Any --format=list | grep config_ignore.settings | wc -l") -gt 0 ]; then make drush config:delete config_ignore.settings -- -y && make drush cr; fi && \
      printf "\033[1m- Simulating deployment against tag ${LAST_TAG}...\n\033[0m" && \
      make drush deploy -- -y && \
      printf "\033[1m- Successful deployment simulation of ${CI_COMMIT_REF_NAME} against tag ${LAST_TAG} using ${CI_ENVIRONMENT_URL} review app.\n\033[0m"; fi
  only:
    refs:
      - branches
      - merge_requests
    variables:
      - $TEST_UPDATE_DEPLOYMENTS == "TRUE"

test:storybook:
  stage: tests
  environment:
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_PATH_SLUG}.${REVIEW_DOMAIN}
    name: review/${CI_COMMIT_REF_NAME}
    on_stop: stop_review
  script:
    - cd ${BUILD_DIR}
    - make build-storybook
    - echo "- Storybook is accessible here :" && echo "${CI_ENVIRONMENT_URL}/${STORYBOOK_PATH}"
  extends: .runner_tag_selection
  only:
    refs:
      - branches
      - merge_requests
    variables:
      - $STORYBOOK_PATH

test:behat:
  stage: tests
  environment:
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_PATH_SLUG}.${REVIEW_DOMAIN}
    name: review/${CI_COMMIT_REF_NAME}
    on_stop: stop_review
  script:
    - echo "Starting job script in ${BUILD_DIR}"
    - cd ${BUILD_DIR}
    - BEHAT_ARGS='--colors -f pretty -o std -f junit -o features/junit' make behat
  after_script:
    - cd ${BUILD_DIR}
    - make browser_driver_stop
    - rm -rf web/screenshots
    - mkdir web/screenshots
    - mv features/*.png web/screenshots/
    - echo "- Screenshots are available here :" && cd web/screenshots && ls -h *.png | xargs -i echo "${CI_ENVIRONMENT_URL}/screenshots/{}"
    - mv ${BUILD_DIR}/features/junit ${CI_PROJECT_DIR}
  retry:
    max: 2
    when: script_failure
  dependencies:
    - build:review
  extends: .runner_tag_selection
  only:
    - branches
    - merge_requests
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - junit/*.xml
    reports:
      junit: junit/*.xml

test:cinsp:
  stage: tests
  environment:
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_PATH_SLUG}.${REVIEW_DOMAIN}
    name: review/${CI_COMMIT_REF_NAME}
    on_stop: stop_review
  script:
    - echo "Starting job script in ${BUILD_DIR}"
    - cd ${BUILD_DIR}
    - make cinsp
  dependencies:
    - build:review
  extends: .runner_tag_selection
  only:
    - branches
    - merge_requests

test:drupalrector:
  stage: tests
  environment:
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_PATH_SLUG}.${REVIEW_DOMAIN}
    name: review/${CI_COMMIT_REF_NAME}
    on_stop: stop_review
  script:
    - echo "Starting job script in ${BUILD_DIR}"
    - cd ${BUILD_DIR}
    - make drupalrectorval
  dependencies:
    - build:review
  extends: .runner_tag_selection
  only:
    - branches
    - merge_requests

test:lighthouse:
  stage: tests
  environment:
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_PATH_SLUG}.${REVIEW_DOMAIN}
    name: review/${CI_COMMIT_REF_NAME}
    on_stop: stop_review
  script:
    - echo "Starting job script in ${BUILD_DIR}"
    - cd ${BUILD_DIR}
    - cat lighthouserc.yml
    - docker run --tty --rm --init -d -v `pwd`:`pwd` -w `pwd` -u $(id -u):$(id -g) --entrypoint="/bin/bash" --name "${CI_PROJECT_NAME}-review-${CI_COMMIT_REF_SLUG}_lighthouse" cypress/browsers:node14.15.0-chrome86-ff82
    - docker exec --tty ${CI_PROJECT_NAME}-review-${CI_COMMIT_REF_SLUG}_lighthouse node -v
    - docker exec --tty ${CI_PROJECT_NAME}-review-${CI_COMMIT_REF_SLUG}_lighthouse npm -v
    - docker exec --tty -u root ${CI_PROJECT_NAME}-review-${CI_COMMIT_REF_SLUG}_lighthouse npm install -g @lhci/cli@0.6.x
    - docker exec --tty ${CI_PROJECT_NAME}-review-${CI_COMMIT_REF_SLUG}_lighthouse lhci --version
    - docker exec --tty ${CI_PROJECT_NAME}-review-${CI_COMMIT_REF_SLUG}_lighthouse lhci healthcheck
    - docker exec --tty ${CI_PROJECT_NAME}-review-${CI_COMMIT_REF_SLUG}_lighthouse lhci collect --url=https://${RA_BASIC_AUTH_USERNAME}:${RA_BASIC_AUTH_PASSWORD}@${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_PATH_SLUG}.${REVIEW_DOMAIN}
    - docker exec --tty ${CI_PROJECT_NAME}-review-${CI_COMMIT_REF_SLUG}_lighthouse lhci assert
  after_script:
    - if [ -n `docker ps -f 'name=${CI_PROJECT_NAME}-review-${CI_COMMIT_REF_SLUG}_lighthouse' -q` ]; then echo 'Stopping container'; docker rm --force ${CI_PROJECT_NAME}-review-${CI_COMMIT_REF_SLUG}_lighthouse; fi
    - cd ${BUILD_DIR}
    - if [ -d .lighthouseci ]; then mv .lighthouseci web/lighthouseci; echo "- Reports are available here :" && for i in $(find web/lighthouseci/ -name "*.html"); do basename $i;done | xargs -i echo "${CI_ENVIRONMENT_URL}/lighthouseci/{}"; fi
  dependencies:
    - build:review
  extends: .runner_tag_selection
  only:
    - branches
    - merge_requests

test:contentgen:
  stage: tests
  environment:
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_PATH_SLUG}.${REVIEW_DOMAIN}
    name: review/${CI_COMMIT_REF_NAME}
    on_stop: stop_review
  script:
    - echo "Starting job script in ${BUILD_DIR}"
    - cd ${BUILD_DIR}
    - make contentgen
  dependencies:
    - build:review
  extends: .runner_tag_selection
  only:
    - branches
    - merge_requests
  when: manual

test:patch:
  stage: tests
  environment:
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_PATH_SLUG}.${REVIEW_DOMAIN}
    name: review/${CI_COMMIT_REF_NAME}
    on_stop: stop_review
  script:
    - echo "Starting job script in ${BUILD_DIR}"
    - cd ${BUILD_DIR}
    - make patchval
  extends: .runner_tag_selection
  except:
    variables:
      - $RUN_PATCHVAL_CI_JOB == "FALSE" # To use only in case of private packages and if patching upstream is not possible at all
  only:
    refs:
      - branches
      - merge_requests

test:statusreport:
  stage: 'more tests'
  environment:
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_PATH_SLUG}.${REVIEW_DOMAIN}
    name: review/${CI_COMMIT_REF_NAME}
    on_stop: stop_review
  script:
    - echo "Starting job script in ${BUILD_DIR}"
    - cd ${BUILD_DIR}
    - make statusreportval
  dependencies:
    - build:review
  extends: .runner_tag_selection
  only:
    - branches
    - merge_requests

test:upgradestatus:
  stage: 'more tests'
  environment:
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_PATH_SLUG}.${REVIEW_DOMAIN}
    name: review/${CI_COMMIT_REF_NAME}
    on_stop: stop_review
  script:
    - echo "Starting job script in ${BUILD_DIR}"
    - cd ${BUILD_DIR}
    - make upgradestatusval
  dependencies:
    - build:review
  extends: .runner_tag_selection
  only:
    - branches
    - merge_requests

test:watchdog:
  stage: 'more tests'
  environment:
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_PATH_SLUG}.${REVIEW_DOMAIN}
    name: review/${CI_COMMIT_REF_NAME}
    on_stop: stop_review
  script:
    - echo "Starting job script in ${BUILD_DIR}"
    - cd ${BUILD_DIR}
    - make watchdogval
  dependencies:
    - build:review
  extends: .runner_tag_selection
  only:
    - branches
    - merge_requests
